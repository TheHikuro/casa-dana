/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type { CalendarDto, GetCalendarPriceParams } from '../../models'
import { customAxiosInstance } from '../../customAxiosInstance'
import type { ErrorType } from '../../customAxiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const getCalendarPrice = (
  params?: GetCalendarPriceParams,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<unknown[]>(
    { url: `/Calendar/price`, method: 'GET', params, signal },
    options
  )
}

export const getGetCalendarPriceQueryKey = (
  params?: GetCalendarPriceParams
) => {
  return [`/Calendar/price`, ...(params ? [params] : [])] as const
}

export const getGetCalendarPriceQueryOptions = <
  TData = Awaited<ReturnType<typeof getCalendarPrice>>,
  TError = ErrorType<unknown>
>(
  params?: GetCalendarPriceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCalendarPrice>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCalendarPriceQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCalendarPrice>>
  > = ({ signal }) => getCalendarPrice(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCalendarPrice>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCalendarPriceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCalendarPrice>>
>
export type GetCalendarPriceQueryError = ErrorType<unknown>

export function useGetCalendarPrice<
  TData = Awaited<ReturnType<typeof getCalendarPrice>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetCalendarPriceParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCalendarPrice>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCalendarPrice>>,
          TError,
          Awaited<ReturnType<typeof getCalendarPrice>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCalendarPrice<
  TData = Awaited<ReturnType<typeof getCalendarPrice>>,
  TError = ErrorType<unknown>
>(
  params?: GetCalendarPriceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCalendarPrice>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCalendarPrice>>,
          TError,
          Awaited<ReturnType<typeof getCalendarPrice>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCalendarPrice<
  TData = Awaited<ReturnType<typeof getCalendarPrice>>,
  TError = ErrorType<unknown>
>(
  params?: GetCalendarPriceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCalendarPrice>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetCalendarPrice<
  TData = Awaited<ReturnType<typeof getCalendarPrice>>,
  TError = ErrorType<unknown>
>(
  params?: GetCalendarPriceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCalendarPrice>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetCalendarPriceQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getCalendar = (
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<CalendarDto[]>(
    { url: `/Calendar`, method: 'GET', signal },
    options
  )
}

export const getGetCalendarQueryKey = () => {
  return [`/Calendar`] as const
}

export const getGetCalendarQueryOptions = <
  TData = Awaited<ReturnType<typeof getCalendar>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCalendar>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCalendarQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCalendar>>> = ({
    signal
  }) => getCalendar(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCalendar>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCalendarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCalendar>>
>
export type GetCalendarQueryError = ErrorType<unknown>

export function useGetCalendar<
  TData = Awaited<ReturnType<typeof getCalendar>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCalendar>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCalendar>>,
        TError,
        Awaited<ReturnType<typeof getCalendar>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customAxiosInstance>
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCalendar<
  TData = Awaited<ReturnType<typeof getCalendar>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCalendar>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getCalendar>>,
        TError,
        Awaited<ReturnType<typeof getCalendar>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCalendar<
  TData = Awaited<ReturnType<typeof getCalendar>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCalendar>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetCalendar<
  TData = Awaited<ReturnType<typeof getCalendar>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCalendar>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetCalendarQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postCalendar = (
  calendarDto: CalendarDto,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<CalendarDto>(
    {
      url: `/Calendar`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: calendarDto,
      signal
    },
    options
  )
}

export const getPostCalendarMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCalendar>>,
    TError,
    { data: CalendarDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCalendar>>,
  TError,
  { data: CalendarDto },
  TContext
> => {
  const mutationKey = ['postCalendar']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCalendar>>,
    { data: CalendarDto }
  > = (props) => {
    const { data } = props ?? {}

    return postCalendar(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostCalendarMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCalendar>>
>
export type PostCalendarMutationBody = CalendarDto
export type PostCalendarMutationError = ErrorType<unknown>

export const usePostCalendar = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCalendar>>,
    TError,
    { data: CalendarDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof postCalendar>>,
  TError,
  { data: CalendarDto },
  TContext
> => {
  const mutationOptions = getPostCalendarMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getCalendarId = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<CalendarDto>(
    { url: `/Calendar/${id}`, method: 'GET', signal },
    options
  )
}

export const getGetCalendarIdQueryKey = (id: string) => {
  return [`/Calendar/${id}`] as const
}

export const getGetCalendarIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCalendarId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCalendarId>>, TError, TData>
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCalendarIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCalendarId>>> = ({
    signal
  }) => getCalendarId(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCalendarId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCalendarIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCalendarId>>
>
export type GetCalendarIdQueryError = ErrorType<unknown>

export function useGetCalendarId<
  TData = Awaited<ReturnType<typeof getCalendarId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCalendarId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCalendarId>>,
          TError,
          Awaited<ReturnType<typeof getCalendarId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCalendarId<
  TData = Awaited<ReturnType<typeof getCalendarId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCalendarId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCalendarId>>,
          TError,
          Awaited<ReturnType<typeof getCalendarId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetCalendarId<
  TData = Awaited<ReturnType<typeof getCalendarId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCalendarId>>, TError, TData>
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetCalendarId<
  TData = Awaited<ReturnType<typeof getCalendarId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCalendarId>>, TError, TData>
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetCalendarIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putCalendarId = (
  id: string,
  calendarDto: CalendarDto,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<void>(
    {
      url: `/Calendar/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: calendarDto
    },
    options
  )
}

export const getPutCalendarIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCalendarId>>,
    TError,
    { id: string; data: CalendarDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCalendarId>>,
  TError,
  { id: string; data: CalendarDto },
  TContext
> => {
  const mutationKey = ['putCalendarId']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCalendarId>>,
    { id: string; data: CalendarDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return putCalendarId(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutCalendarIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putCalendarId>>
>
export type PutCalendarIdMutationBody = CalendarDto
export type PutCalendarIdMutationError = ErrorType<unknown>

export const usePutCalendarId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCalendarId>>,
    TError,
    { id: string; data: CalendarDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof putCalendarId>>,
  TError,
  { id: string; data: CalendarDto },
  TContext
> => {
  const mutationOptions = getPutCalendarIdMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deleteCalendarId = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<void>(
    { url: `/Calendar/${id}`, method: 'DELETE' },
    options
  )
}

export const getDeleteCalendarIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCalendarId>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCalendarId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteCalendarId']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCalendarId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteCalendarId(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteCalendarIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCalendarId>>
>

export type DeleteCalendarIdMutationError = ErrorType<unknown>

export const useDeleteCalendarId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCalendarId>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteCalendarId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteCalendarIdMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type { ProblemDetails, ReservationDto } from '../../models'
import { customAxiosInstance } from '../../customAxiosInstance'
import type { ErrorType } from '../../customAxiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const getReservations = (
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<ReservationDto[]>(
    { url: `/Reservations`, method: 'GET', signal },
    options
  )
}

export const getGetReservationsQueryKey = () => {
  return [`/Reservations`] as const
}

export const getGetReservationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getReservations>>,
  TError = ErrorType<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetReservationsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReservations>>> = ({
    signal
  }) => getReservations(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getReservations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReservations>>
>
export type GetReservationsQueryError = ErrorType<ProblemDetails>

export function useGetReservations<
  TData = Awaited<ReturnType<typeof getReservations>>,
  TError = ErrorType<ProblemDetails>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getReservations>>,
        TError,
        Awaited<ReturnType<typeof getReservations>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customAxiosInstance>
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetReservations<
  TData = Awaited<ReturnType<typeof getReservations>>,
  TError = ErrorType<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getReservations>>,
        TError,
        Awaited<ReturnType<typeof getReservations>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetReservations<
  TData = Awaited<ReturnType<typeof getReservations>>,
  TError = ErrorType<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetReservations<
  TData = Awaited<ReturnType<typeof getReservations>>,
  TError = ErrorType<ProblemDetails>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getReservations>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetReservationsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const postReservations = (
  reservationDto: ReservationDto,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<ReservationDto>(
    {
      url: `/Reservations`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: reservationDto,
      signal
    },
    options
  )
}

export const getPostReservationsMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postReservations>>,
    TError,
    { data: ReservationDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postReservations>>,
  TError,
  { data: ReservationDto },
  TContext
> => {
  const mutationKey = ['postReservations']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postReservations>>,
    { data: ReservationDto }
  > = (props) => {
    const { data } = props ?? {}

    return postReservations(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostReservationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postReservations>>
>
export type PostReservationsMutationBody = ReservationDto
export type PostReservationsMutationError = ErrorType<ProblemDetails>

export const usePostReservations = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postReservations>>,
    TError,
    { data: ReservationDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof postReservations>>,
  TError,
  { data: ReservationDto },
  TContext
> => {
  const mutationOptions = getPostReservationsMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getReservationsId = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<ReservationDto>(
    { url: `/Reservations/${id}`, method: 'GET', signal },
    options
  )
}

export const getGetReservationsIdQueryKey = (id: string) => {
  return [`/Reservations/${id}`] as const
}

export const getGetReservationsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getReservationsId>>,
  TError = ErrorType<ProblemDetails>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReservationsId>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetReservationsIdQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReservationsId>>
  > = ({ signal }) => getReservationsId(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReservationsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetReservationsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReservationsId>>
>
export type GetReservationsIdQueryError = ErrorType<ProblemDetails>

export function useGetReservationsId<
  TData = Awaited<ReturnType<typeof getReservationsId>>,
  TError = ErrorType<ProblemDetails>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReservationsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservationsId>>,
          TError,
          Awaited<ReturnType<typeof getReservationsId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetReservationsId<
  TData = Awaited<ReturnType<typeof getReservationsId>>,
  TError = ErrorType<ProblemDetails>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReservationsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReservationsId>>,
          TError,
          Awaited<ReturnType<typeof getReservationsId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetReservationsId<
  TData = Awaited<ReturnType<typeof getReservationsId>>,
  TError = ErrorType<ProblemDetails>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReservationsId>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetReservationsId<
  TData = Awaited<ReturnType<typeof getReservationsId>>,
  TError = ErrorType<ProblemDetails>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReservationsId>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetReservationsIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const putReservationsId = (
  id: string,
  reservationDto: ReservationDto,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<void>(
    {
      url: `/Reservations/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: reservationDto
    },
    options
  )
}

export const getPutReservationsIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putReservationsId>>,
    TError,
    { id: string; data: ReservationDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof putReservationsId>>,
  TError,
  { id: string; data: ReservationDto },
  TContext
> => {
  const mutationKey = ['putReservationsId']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putReservationsId>>,
    { id: string; data: ReservationDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return putReservationsId(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutReservationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putReservationsId>>
>
export type PutReservationsIdMutationBody = ReservationDto
export type PutReservationsIdMutationError = ErrorType<ProblemDetails>

export const usePutReservationsId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putReservationsId>>,
    TError,
    { id: string; data: ReservationDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof putReservationsId>>,
  TError,
  { id: string; data: ReservationDto },
  TContext
> => {
  const mutationOptions = getPutReservationsIdMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deleteReservationsId = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>
) => {
  return customAxiosInstance<void>(
    { url: `/Reservations/${id}`, method: 'DELETE' },
    options
  )
}

export const getDeleteReservationsIdMutationOptions = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteReservationsId>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteReservationsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteReservationsId']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteReservationsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteReservationsId(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteReservationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteReservationsId>>
>

export type DeleteReservationsIdMutationError = ErrorType<ProblemDetails>

export const useDeleteReservationsId = <
  TError = ErrorType<ProblemDetails>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteReservationsId>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteReservationsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteReservationsIdMutationOptions(options)

  return useMutation(mutationOptions)
}

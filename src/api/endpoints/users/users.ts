/**
 * Generated by orval üç∫
 * Do not edit manually.
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type { CreateUserDto, LoginUserDto } from '../../models'
import { customAxiosInstance } from '../../customAxiosInstance'
import type { ErrorType } from '../../customAxiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const postApiUsersRegister = (
  createUserDto: CreateUserDto,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<void>(
    {
      url: `/api/Users/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createUserDto,
      signal
    },
    options
  )
}

export const getPostApiUsersRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersRegister>>,
    TError,
    { data: CreateUserDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsersRegister>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ['postApiUsersRegister']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsersRegister>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {}

    return postApiUsersRegister(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiUsersRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersRegister>>
>
export type PostApiUsersRegisterMutationBody = CreateUserDto
export type PostApiUsersRegisterMutationError = ErrorType<unknown>

export const usePostApiUsersRegister = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersRegister>>,
    TError,
    { data: CreateUserDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsersRegister>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getPostApiUsersRegisterMutationOptions(options)

  return useMutation(mutationOptions)
}
export const postApiUsersLogin = (
  loginUserDto: LoginUserDto,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<void>(
    {
      url: `/api/Users/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginUserDto,
      signal
    },
    options
  )
}

export const getPostApiUsersLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersLogin>>,
    TError,
    { data: LoginUserDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsersLogin>>,
  TError,
  { data: LoginUserDto },
  TContext
> => {
  const mutationKey = ['postApiUsersLogin']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsersLogin>>,
    { data: LoginUserDto }
  > = (props) => {
    const { data } = props ?? {}

    return postApiUsersLogin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiUsersLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersLogin>>
>
export type PostApiUsersLoginMutationBody = LoginUserDto
export type PostApiUsersLoginMutationError = ErrorType<unknown>

export const usePostApiUsersLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersLogin>>,
    TError,
    { data: LoginUserDto },
    TContext
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsersLogin>>,
  TError,
  { data: LoginUserDto },
  TContext
> => {
  const mutationOptions = getPostApiUsersLoginMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getApiUsersId = (
  id: string,
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<void>(
    { url: `/api/Users/${id}`, method: 'GET', signal },
    options
  )
}

export const getGetApiUsersIdQueryKey = (id: string) => {
  return [`/api/Users/${id}`] as const
}

export const getGetApiUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({
    signal
  }) => getApiUsersId(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersId>>
>
export type GetApiUsersIdQueryError = ErrorType<unknown>

export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = ErrorType<unknown>
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    >
    request?: SecondParameter<typeof customAxiosInstance>
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetApiUsersIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getApiUsers = (
  options?: SecondParameter<typeof customAxiosInstance>,
  signal?: AbortSignal
) => {
  return customAxiosInstance<void>(
    { url: `/api/Users`, method: 'GET', signal },
    options
  )
}

export const getGetApiUsersQueryKey = () => {
  return [`/api/Users`] as const
}

export const getGetApiUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsers>>> = ({
    signal
  }) => getApiUsers(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsers>>
>
export type GetApiUsersQueryError = ErrorType<unknown>

export function useGetApiUsers<
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUsers>>,
        TError,
        Awaited<ReturnType<typeof getApiUsers>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customAxiosInstance>
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiUsers<
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUsers>>,
        TError,
        Awaited<ReturnType<typeof getApiUsers>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetApiUsers<
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetApiUsers<
  TData = Awaited<ReturnType<typeof getApiUsers>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUsers>>, TError, TData>
  >
  request?: SecondParameter<typeof customAxiosInstance>
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetApiUsersQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
